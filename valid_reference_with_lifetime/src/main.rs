fn main() {
    let novel = String::from("Call me Ishmael. Some years ago...");
    let first_sentence = novel.split('.').next().expect("Could not find a '.'");
    let i = ImportantExcerpt {
        part: first_sentence,
    };
    println!("{:?}:{:?}", i, i.part);
}

// ライフタイムでダンリング参照を回避する
// ダンリング参照：参照先がスコープを抜けた後に参照を使おうとすること
// プログラムが参照するつもりだったデータ以外のデータを参照すること
// 以下のコードはダンリング参照となる
// {
//     let r;                // ---------+-- 'a
//                           //          |
//     {                     //          |
//         let x = 5;        // -+-- 'b  |
//         r = &x;           //  |       |
//     }                     // -+       |
//                           //          |
//     println!("r: {}", r); //          |
// }                         // ---------+

// 基本的に、参照は参照先のスコープよりも短くなければならない
// 借用チェッカーがこのコードが無効であると決定している。
// 以下は参照が参照先にスコープよりも短いケースである。
// {
//     let x = 5;            // ----------+-- 'b
//                           //           |
//     let r = &x;           // --+-- 'a  |
//                           //   |       |
//     println!("r: {}", r); //   |       |
//                           // --+       |
// }                         // ----------+

// ライフタイム注釈記法
// 参照のライフタイムを明示的に指定するための構文
// &i32        // 参照
// &'a i32     // 'aというライフタイムを持つ参照
// &'a mut i32 // 'aというライフタイムを持つ可変参照
// fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
//     if x.len() > y.len() {
//         x
//     } else {
//         y
//     }
// }
// 究極的にライフタイム記法は、関数の引数と戻り値のライフタイムを接続することに関するものである。

// 構造体定義のライフタイム注釈
// 構造体に参照を保持させる場合、構造体の定義にライフタイム注釈を追加する必要がある
// これは関数の引数と戻り値のライフタイムを接続することと同じ理由である
#[derive(Debug)]
struct ImportantExcerpt<'a> {
    part: &'a str,
}

// ライフタイム省略規則
// 下記コードにはライフタイム注釈がないが、コンパイラはライフタイムを推論する
// fn first_word(s: &str) -> &str {
//     let bytes = s.as_bytes();

//     for (i, &item) in bytes.iter().enumerate() {
//         if item == b' ' {
//             return &s[0..i];
//         }
//     }

//     &s[..]
// }
// 引数のライフタイムは：入力ライフタイムと呼ばれる
// 戻り値のライフタイムは：出力ライフタイムと呼ばれる

// ライフタイム省略には3つの規則がある
// 1. 1つの入力ライフタイム引数を得る。2津の引数がある場合は、2つの入力ライフタイム引数を得る。
// 2. 1つだけ入力ライフタイム引数がある場合、その入力ライフタイムは全ての出力ライフタイムに適用される
// 3. 複数の入力ライフタイム引数があるが、メソッドであり、self引数が参照ならば、selfのライフタイムが全ての出力ライフタイムに適用される
// 以下のコードは上記3津の規則に従っていないため、コンパイルエラーとなる
// fn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {

// 静的ライフタイム
// let s: &'static str = "I have a static lifetime.";
// 'staticはプログラム全体の期間を指すものである。
// このライフタイムはプログラムが終了するまで存在するため、参照先のデータもプログラムが終了するまで存在することを意味する
// 参照が本当に全期間生きるのが正しいのか確認する必要がある
